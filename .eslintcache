[{"C:\\Users\\Omoefe\\Desktop\\Project\\ReactGame\\game\\src\\index.js":"1","C:\\Users\\Omoefe\\Desktop\\Project\\ReactGame\\game\\src\\App.js":"2","C:\\Users\\Omoefe\\Desktop\\Project\\ReactGame\\game\\src\\reportWebVitals.js":"3","C:\\Users\\Omoefe\\Desktop\\Project\\ReactGame\\game\\src\\Quiz.js":"4","C:\\Users\\Omoefe\\Desktop\\Project\\ReactGame\\game\\src\\QuizOptions.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":458,"mtime":1608730643524,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":3877,"mtime":1608933666450,"results":"10","hashOfConfig":"7"},{"size":586,"mtime":1608927771606,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"5mzejv",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"C:\\Users\\Omoefe\\Desktop\\Project\\ReactGame\\game\\src\\index.js",[],["24","25"],"C:\\Users\\Omoefe\\Desktop\\Project\\ReactGame\\game\\src\\App.js",[],"C:\\Users\\Omoefe\\Desktop\\Project\\ReactGame\\game\\src\\reportWebVitals.js",[],"C:\\Users\\Omoefe\\Desktop\\Project\\ReactGame\\game\\src\\Quiz.js",["26","27"],"import React, {Component} from 'react';\r\nimport QuizOptions from './QuizOptions';\r\nimport classNames from 'classnames';\r\n\r\nclass Quiz extends Component{\r\n  constructor(props){\r\n    super(props);\r\n\r\n    let riddle = this.playGame();\r\n    let correct = false;\r\n    let gameOver = false;\r\n\r\n    this.state = {riddle, correct, gameOver};\r\n\r\n    this.renderOptions = this.renderOptions.bind(this);\r\n    this.checkResults = this.checkResults.bind(this);\r\n    this.play = this.play.bind(this);\r\n  }\r\n  randomNumber(min, max){\r\n    return Math.floor(Math.random() * (max-min+1)) +min;\r\n  }\r\n  generateRandomOptions(sum){\r\n    let result = sum;\r\n    let resultsArray = [];\r\n    let randomNumberArray = [];\r\n\r\n    while(randomNumberArray.length <= 3){\r\n      let randomNumber = this.randomNumber(1, 19);\r\n      if(randomNumberArray.indexOf(randomNumber) > -1) continue;\r\n      randomNumberArray.push(randomNumber);\r\n    }\r\n     \r\n     console.log(randomNumberArray);\r\n     \r\n    for(let i = 0; i < 3; i++){\r\n      let addSubtract = this.randomNumber(0,1);\r\n      let result = sum;\r\n      if(addSubtract === 1){\r\n        // add the sum to the result\r\n        result += randomNumberArray[i];\r\n        resultsArray.push(result);\r\n      }else{\r\n        // Subtract the number from the  \r\n        result -= randomNumberArray[i];\r\n        resultsArray.push(result);\r\n      }\r\n    }\r\n\r\n    return resultsArray;\r\n  }\r\n  playGame(){\r\n    let field1 = this.randomNumber(20,50);\r\n    let field2 = this.randomNumber(20,50);\r\n    let result = field1 + field2;\r\n    let resultsArray = this.generateRandomOptions(result);\r\n    resultsArray.push(result);\r\n    resultsArray.sort(function(a,b){return 0.5 - Math.random()});\r\n    let riddle = {\r\n       resultsArray: resultsArray,\r\n       field1: field1,\r\n       field2: field2,\r\n       answer: result\r\n    };\r\n\r\n    console.log(riddle);\r\n    \r\n     if(this.state && this.state.gameOver) {\r\n       this.setState({riddle: riddle});\r\n     } else{\r\n      return riddle;\r\n     }\r\n\r\n  }\r\n  checkResults(option){\r\n    console.log('checkResults called '+option);\r\n    if(this.state.riddle.answer === option){\r\n      console.log('correct answer');\r\n      this.setState({correct: true, gameOver: true});\r\n    } else{\r\n      console.log('wrong answer');\r\n      this.setState({correct: false, gameOver: true});\r\n    }\r\n  }\r\n  renderOptions(){\r\n    return(\r\n      <div className=\"options\">\r\n            {this.state.riddle.resultsArray.map((option, i)=>\r\n              <QuizOptions option={option} key={i} checkResults={(option) => this.checkResults(option)}/>\r\n            )}\r\n         \r\n           \r\n      </div>\r\n    );\r\n  }\r\n  renderMessage(){\r\n    if(this.state.correct){\r\n      return <h3>Good Job! Hit the button below to play Again!</h3>\r\n    } else{\r\n      return <h3>ohh ohh! Hit the button below to play Again!</h3>\r\n    }\r\n  }\r\n  play(){\r\n    this.setState({correct: false, gameOver: false});\r\n    this.playGame();\r\n  }\r\n    render(){\r\n        return(\r\n            <div className=\"quiz\">\r\n               <div className=\"quiz-content\">\r\n                 <p className=\"question\"> What is the sum of <span className=\"text-info\">{this.state.riddle.field1}</span> and <span className=\"text-info\"> {this.state.riddle.field2}</span>?</p>\r\n                  {this.renderOptions()}\r\n               </div>\r\n               Correct: {this.state.correct ? \"True\" : \"False\"}<br/>\r\n               GameOver: {this.state.gameOver ? \"True\" : \"False\"}\r\n               <div className={classNames('after', {'hide': !this.state.gameOver}, {'wrong': !this.state.correct}, {'correct': this.state.correct})}>\r\n                  {this.renderMessage()}\r\n               </div>\r\n               <div className=\"play-again\">\r\n                 <a className=\"button\" onClick={this.play}>Play Again</a>\r\n               </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Quiz;","C:\\Users\\Omoefe\\Desktop\\Project\\ReactGame\\game\\src\\QuizOptions.js",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":23,"column":9,"nodeType":"34","messageId":"35","endLine":23,"endColumn":15},{"ruleId":"36","severity":1,"message":"37","line":119,"column":18,"nodeType":"38","endLine":119,"endColumn":60},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'result' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]